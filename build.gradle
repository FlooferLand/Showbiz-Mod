plugins {
	id "fabric-loom" version "${loom_version}"
	id "maven-publish"
	id("com.github.spotbugs") version "6.2.1"
}

// Settings and variables
int minJavaVersion = Integer.parseInt(project.min_java_version)
version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	repositories {
		// Modrinth package repository
		exclusiveContent {
			forRepository {
				//noinspection ForeignDelegate - Modrinth-recommended
				maven {
					name = "Modrinth"
					url = "https://api.modrinth.com/maven"
				}
			}
			filter {
				includeGroup "maven.modrinth"
			}
		}

		// GeckoLib - animation & model loading
		maven {
			name = "GeckoLib"
			url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
			content {
				includeGroup("software.bernie.geckolib")
			}
		}

		// Cloth Config
		maven { url "https://maven.shedaniel.me/" }
		maven { url "https://maven.terraformersmc.com/releases/" }

		// Development environment auth
		maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
	}
}

loom {
	accessWidenerPath = file("src/main/resources/showbiz.accesswidener")
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

// TODO: Make sure isDatagen is only true when running via
def isServer = ((!project.hasProperty("fabric.dli.env")) || project.property("fabric.dli.env") == "server")
def isDatagen = project.hasProperty("fabric-api.datagen") && project.property("fabric.dli.env") == "server"
dependencies {
	// Minecraft
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

	// Jackson (JSON, YAML, etc)
	implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
	implementation "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
	implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"

	// Mod dependencies
	modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"
	modCompileOnly "maven.modrinth:modmenu:${mod_menu_version}"

	// OGG Vorbis reading library for data generation.
	// Using this library because Mojang/Fabric"s code prevents usage on server-side for some stupid reason
	//if (isDatagen) {
	implementation "ws.schild:jave-all-deps:${jave_version}"
	//}

	// Other
	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${dev_auth_version}")
	spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0"
}

// Injecting gradle.properties into other files
processResources {
	exclude("**/*.bbmodel", "**/*.lnk")

	Map<String, Object> properties = [
			"version": version,
			"minecraft_version": minecraft_version,
			"loader_version": loader_version,
			"fabric_version": fabric_version,
			"min_java_version": minJavaVersion.toString(),

			// Mod dependencies
			"geckolib_version": geckolib_version,
	]
	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
	filesMatching(project.archives_base_name + ".mixins.json") {
		expand "archivesName": project.archives_base_name
		expand "archivesBaseName": project.archives_base_name
	}

	duplicatesStrategy = DuplicatesStrategy.WARN
}

// Java version
tasks.withType(JavaCompile).configureEach {
	it.options.release = minJavaVersion
}
java {
	withSourcesJar()
	sourceCompatibility = minJavaVersion - 1
	targetCompatibility = minJavaVersion - 1
}

jar {
	inputs.property "archivesName", project.base.archivesName
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

spotbugs {
	toolVersion = "4.9.3"
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
